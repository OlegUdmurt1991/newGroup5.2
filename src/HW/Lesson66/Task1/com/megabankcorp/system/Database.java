package HW.Lesson66.Task1.com.megabankcorp.system;

import HW.Lesson66.Task1.com.megabankcorp.records.Account;

import java.math.BigDecimal;

/**
 * Представим, что вы занимаетесь проектированием банковской системы учета.
 * Ваша задача описать базовые классы, на основании которых могут делаться остальные.
 * Спроектируйте классы Account (счет) и Database (база данных) согласно описанию:
 * <p>
 * Database
 * Этот класс является абстрактным шаблоном для реализаций,
 * которые будут создаваться в виде наследников этого класса.
 * В нем находятся методы, которые наследники обязаны реализовать.
 * Или реализации методов по-умолчанию.
 * Вам наследников реализовывать не надо.
 * <p>
 * находится в пакете com.megabankcorp.system
 * содержит заготовки методов
 * - deposit - сохраняет указанную сумму на указанный счет
 * не содержит реализации, просто сигнатура с описанием
 * доступен отовсюду
 * <p>
 * - withdraw - снимает указанную сумму с указанного счета
 * не содержит реализации, просто сигнатура с описанием
 * доступен отовсюду
 * <p>
 * - getAmount - получает значение суммы с указанного счета
 * не содержит реализации, просто сигнатура с описанием
 * доступен только из пакета и реализаций
 * <p>
 * - transfer - передает указанную сумму с одного указанного счета на другой
 * содержит реализацию по умолчанию, использующую методы deposit и withdraw
 * доступен только из пакета
 * <p>
 * Для суммы используйте тип BigDecimal.
 * Для параметров счетов используете класс Account
 * <p>
 * Account
 * это простой класс, который находится в пакете com.megabankcorp.records
 * содержит
 * поле для текущей суммы на счете
 * поле для текущего номера счета
 * поле для номера клиента банка
 * <p>
 * Для суммы используйте тип BigDecimal, для номеров - long
 */
public abstract class Database {


    /**
     * сохраняет указанную сумму на указанный счет
     * не содержит реализации, просто сигнатура с описанием
     * доступен отовсюду
     */
    public abstract void deposit(Account account, BigDecimal amount);

    /**
     * снимает указанную сумму с указанного счета
     * не содержит реализации, просто сигнатура с описанием
     * доступен отовсюду
     */
    public abstract void withdraw(Account account, BigDecimal amount);

    /**
     * получает значение суммы с указанного счета
     * не содержит реализации, просто сигнатура с описанием
     * доступен только из пакета и реализаций
     */
    abstract void getAmount(Account account, BigDecimal amount);

    /**
     * передает указанную сумму с одного указанного счета на другой
     * содержит реализацию по умолчанию, использующую методы deposit и withdraw
     * доступен только из пакета
     */
    void transfer(Account fromAccount, Account toAccount, BigDecimal amount) {
        withdraw(fromAccount, amount);
        deposit(toAccount, amount);
    }
}
